// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
import dagger.internal.Factory;
import javax.inject.Provider;

public final class Phone_Factory implements Factory<Phone> {
  private final Provider<Camera> cameraProvider;

  private final Provider<Display> displayProvider;

  private final Provider<Brand> brandProvider;

  public Phone_Factory(
      Provider<Camera> cameraProvider,
      Provider<Display> displayProvider,
      Provider<Brand> brandProvider) {
    this.cameraProvider = cameraProvider;
    this.displayProvider = displayProvider;
    this.brandProvider = brandProvider;
  }

  @Override
  public Phone get() {
    return new Phone(cameraProvider.get(), displayProvider.get(), brandProvider.get());
  }

  public static Factory<Phone> create(
      Provider<Camera> cameraProvider,
      Provider<Display> displayProvider,
      Provider<Brand> brandProvider) {
    return new Phone_Factory(cameraProvider, displayProvider, brandProvider);
  }
}
